	1.Spring Cloud
	微服务整体解决方案，全家桶
	不是一个独立的框架
	2.eruka
		ap
		集群  -对等结构
	zookeeper
		cp
		集群  -主从结构
	3.ribbon
	负载均衡
	重试
	4.hystrix
		降级
		熔断
	5.hystrix dashboard
	仪表盘
	6.turbine
	聚合监控数据
	7.feign
	声明式客户端
	集成ribbon
	集成 hystrix
	8.zuul
	api网关，统一调用入口
	统一权限过滤器（在这里使用了，就不需要在后端再去校验用户登录信息）
	集成ribbon
		默认使用负载均衡
		重试，不推荐使用（因为会使请求时间过长，降低访问效率，总闸装在入户电表那里）
	9.config
	配置中心，集成管理维护配置文件
	默认git存储
	也可以使用本地存储，或者数据库存储
	10.bus
	消息总线
	用来做配置刷新
	要结合消息中间件服务器
	11.sleuth+zipkin
	链路跟踪
	
	-----------------------------------
	-分布式 ACP
	分布式中的三个重要特性
	A 一致性（Consistency）
	C 可用性（Availability）
	P 分区容错性(Tolerance of network Partition)
	
	CAP原理是指这三个要素最多只能同时实现两点，不可能三者兼顾。因此在进行分布式架构设计时，必须做出取舍。而对于分布式数据系统，分区容忍性是基本要求，否则就失去了价值。因此设计分布式数据系统，就是在一致性和可用性之间取一个平衡。对于大多数WEB应用，其实并不需要强一致性，因此牺牲一致性而换取高可用性，是多数分布式数据库产品的方向。
	CA without P，强调一致性和可用性，放弃分区容错。不允许分区，放弃系统扩展。
	违反分布式初衷，分布式一定需要有P；
	CP without A：强调数据一致性，分布式默认需要分区容错，牺牲可用性。一般对于数据一致要求高的需求采用此模式。例如最典型的就是分布式数据库，如Redis、HBase等.还有银行转账业务也需要保持数据的安全性。

	AP wihtout C：要高可用并允许分区，则需放弃一致性。
	一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。很多商城的抢购就会使用这样的设计模式，即使会有些数据不一致，但是
	却维护了用户的友好使用。

	大型分布式项目，为了友好的用户使用多采用AP策略，不过实际开发中应该根据业务场景选择相应的架构设计。
	
	
	
——----------
		